{"ast":null,"code":"'use strict';\n\n(function (root, cx) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['fetch'], cx);\n  } else if (typeof exports === 'object') {\n    // Node, CommonJS-like\n    module.exports = cx(require('node-fetch'));\n  } else {\n    // Browser globals (root is window)\n    root.movieTrailer = cx(root.fetch);\n  }\n})(this, function (fetch) {\n  // Public Key on purpose\n  const apiKey = '9d2bff12ed955c7f1f74b83187f188ae';\n  function toUrl(videoId) {\n    return encodeURI('https://www.youtube.com/watch?v=' + videoId);\n  }\n  function getMovieId(search, year, language) {\n    /* Fetch a Movie ID for querying the TMDB API */\n\n    const url = 'https://api.themoviedb.org' + encodeURI('/3/search/movie?api_key=' + apiKey + '&query=' + search + (year !== null ? '&year=' + year : '') + (language !== null ? '&language=' + language : ''));\n    const response = fetch(url, {\n      method: 'GET'\n    }).then(res => res.json(), err => Promise.reject(err.message)).then(json => {\n      if (typeof json.status_message !== 'undefined') {\n        // Error\n        return Promise.reject(new Error(`JSON - ${json.status_message}`));\n      } else if (json.results.length === 0) {\n        // Retry failed search without year\n        if (year !== null) {\n          getMovieId(search, null, language);\n        } else {\n          // Error\n          return Promise.reject(new Error('API - No results found'));\n        }\n      } else {\n        return json.results[0].id;\n      }\n    }).catch(error => error);\n    return response;\n  }\n  function getTrailer(movieId, multi, videoId, language) {\n    /* Fetch single or multiple movie trailers via the TMDB API */\n    const endpoint = 'https://api.themoviedb.org' + encodeURI('/3/movie/' + movieId + '/videos?api_key=' + apiKey + (language !== null ? '&language=' + language : ''));\n    const response = fetch(endpoint, {\n      method: 'GET'\n    }).then(res => res.json(), err => Promise.reject(err.message)).then(json => {\n      if (typeof json.status_message !== 'undefined') {\n        // Error\n        return Promise.reject(new Error(`JSON - ${json.status_message}`));\n      } else if (json.results.length === 0) {\n        // Error\n        return Promise.reject(new Error('API - No results found'));\n      }\n      let results = json.results;\n\n      // Strip all but videoId\n      results = results.map(result => {\n        return result.key;\n      });\n      if (!videoId) {\n        // Return Youtube videoID or full `Watch` URL\n        results = results.map(toUrl);\n      }\n      if (multi) {\n        // Return *unique* urls\n        return Array.from(new Set(results));\n      } else {\n        return results[0];\n      }\n    });\n    return response;\n  }\n  function movieTrailer(movie, options, cb, legacy) {\n    /* Fetch movie trailers */\n\n    // Massage inputs\n    let opts = {\n      multi: false,\n      id: false,\n      year: null,\n      language: null\n    };\n    if (typeof movie !== 'string') {\n      throw new Error('Expected first parameter to be a movie (string)');\n    } else if (typeof options === 'function') {\n      // Second parameter is the callback\n      cb = options;\n      options = null;\n    } else if (typeof options === 'boolean' || options === 'true') {\n      // Second parameter is multi\n      opts.multi = options;\n    } else if (typeof options === 'string' || typeof options === 'number') {\n      // Second parameter is year\n      opts.year = options;\n\n      /* BACKWARDS-COMPATABILITY FOR v1 */\n      if (typeof legacy === 'function' && (typeof cb === 'boolean' || typeof cb === 'string' && cb === 'true')) {\n        // Third parameter is multi\n        opts.multi = cb;\n        cb = legacy;\n      }\n      /* END BACKWARDS-COMPATABILITY */\n    } else if (typeof options === 'object') {\n      // Set options\n      opts = Object.assign(opts, options);\n    }\n\n    // Remove invalid callback\n    if (typeof cb !== 'function') cb = null;\n    const response = getMovieId(movie, opts.year, opts.language).then(movieId => {\n      return getTrailer(movieId, opts.multi, opts.id, opts.language);\n    });\n\n    // Callback\n    if (cb) {\n      return response.then(res => cb(null, res), err => cb(err, null));\n    }\n\n    // Promise\n    return response;\n  }\n\n  // Exposed public method\n  return movieTrailer;\n});","map":{"version":3,"names":["root","cx","define","amd","exports","module","require","movieTrailer","fetch","apiKey","toUrl","videoId","encodeURI","getMovieId","search","year","language","url","response","method","then","res","json","err","Promise","reject","message","status_message","Error","results","length","id","catch","error","getTrailer","movieId","multi","endpoint","map","result","key","Array","from","Set","movie","options","cb","legacy","opts","Object","assign"],"sources":["D:/Workplace/Node/Assignment 1/Assignment 01 Frontend/node_modules/movie-trailer/index.js"],"sourcesContent":["'use strict';\n\n( function ( root, cx ) {\n\n\tif ( typeof define === 'function' && define.amd ) {\n\n\t\t// AMD\n\t\tdefine( ['fetch'], cx )\n\n\t} else if ( typeof exports === 'object' ) {\n\n\t\t// Node, CommonJS-like\n\t\tmodule.exports = cx( require( 'node-fetch' ) )\n\n\t} else {\n\n\t\t// Browser globals (root is window)\n\t\troot.movieTrailer = cx( root.fetch )\n\n\t}\n\n} )( this, function ( fetch ) {\n\n\t// Public Key on purpose\n\tconst apiKey = '9d2bff12ed955c7f1f74b83187f188ae'\n\n\tfunction toUrl ( videoId ) {\n\n\t\treturn encodeURI( 'https://www.youtube.com/watch?v=' + videoId )\n\n\t}\n\n\tfunction getMovieId ( search, year, language ) {\n\n\t\t/* Fetch a Movie ID for querying the TMDB API */\n\n\t\tconst url = 'https://api.themoviedb.org' + encodeURI( '/3/search/movie?api_key=' + apiKey + '&query=' + search + ( ( year !== null ) ? '&year=' + year : '' ) + ( ( language !== null ) ? '&language=' + language : '' ) )\n\n\t\tconst response = fetch( url, {\n\t\t\tmethod: 'GET'\n\t\t} )\n\t\t\t.then(\n\t\t\t\tres => res.json(),\n\t\t\t\terr => Promise.reject( err.message ) )\n\t\t\t.then( json => {\n\n\t\t\t\tif ( typeof ( json.status_message ) !== 'undefined' ) {\n\n\t\t\t\t\t// Error\n\t\t\t\t\treturn Promise.reject( new Error( `JSON - ${json.status_message}` ) )\n\n\t\t\t\t} else if ( json.results.length === 0 ) {\n\n\t\t\t\t\t// Retry failed search without year\n\t\t\t\t\tif ( year !== null ) {\n\n\t\t\t\t\t\tgetMovieId( search, null, language )\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Error\n\t\t\t\t\t\treturn Promise.reject( new Error( 'API - No results found' ) )\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn json.results[0].id\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.catch( error => error )\n\n\t\treturn response\n\n\t}\n\n\tfunction getTrailer ( movieId, multi, videoId, language ) {\n\n\t\t/* Fetch single or multiple movie trailers via the TMDB API */\n\t\tconst endpoint = 'https://api.themoviedb.org' + encodeURI( '/3/movie/' + movieId + '/videos?api_key=' + apiKey + ( ( language !== null ) ? '&language=' + language : '' ) )\n\t\tconst response = fetch( endpoint, {\n\t\t\tmethod: 'GET'\n\t\t} )\n\t\t\t.then(\n\t\t\t\tres => res.json(),\n\t\t\t\terr => Promise.reject( err.message )\n\t\t\t)\n\t\t\t.then( json => {\n\n\t\t\t\tif ( typeof ( json.status_message ) !== 'undefined' ) {\n\n\t\t\t\t\t// Error\n\t\t\t\t\treturn Promise.reject( new Error( `JSON - ${json.status_message}` ) )\n\n\t\t\t\t} else if ( json.results.length === 0 ) {\n\n\t\t\t\t\t// Error\n\t\t\t\t\treturn Promise.reject( new Error( 'API - No results found' ) )\n\n\t\t\t\t}\n\n\t\t\t\tlet results = json.results\n\n\t\t\t\t// Strip all but videoId\n\t\t\t\tresults = results.map( result => {\n\n\t\t\t\t\treturn result.key\n\n\t\t\t\t} )\n\n\t\t\t\tif ( !videoId ) {\n\n\t\t\t\t\t// Return Youtube videoID or full `Watch` URL\n\t\t\t\t\tresults = results.map( toUrl )\n\n\t\t\t\t}\n\n\t\t\t\tif ( multi ) {\n\n\t\t\t\t\t// Return *unique* urls\n\t\t\t\t\treturn Array.from( new Set( results ) )\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn results[0]\n\n\t\t\t\t}\n\n\t\t\t} )\n\n\t\treturn response\n\n\t}\n\n\tfunction movieTrailer ( movie, options, cb, legacy ) {\n\n\t\t/* Fetch movie trailers */\n\n\t\t// Massage inputs\n\t\tlet opts = {\n\t\t\tmulti: false,\n\t\t\tid: false,\n\t\t\tyear: null,\n\t\t\tlanguage: null\n\t\t}\n\n\t\tif ( typeof movie !== 'string' ) {\n\n\t\t\tthrow new Error( 'Expected first parameter to be a movie (string)' )\n\n\t\t} else if ( typeof options === 'function' ) {\n\n\t\t\t// Second parameter is the callback\n\t\t\tcb = options\n\t\t\toptions = null\n\n\t\t} else if ( typeof options === 'boolean' || options === 'true' ) {\n\n\t\t\t// Second parameter is multi\n\t\t\topts.multi = options\n\n\t\t} else if ( typeof options === 'string' || typeof options === 'number' ) {\n\n\t\t\t// Second parameter is year\n\t\t\topts.year = options\n\n\t\t\t/* BACKWARDS-COMPATABILITY FOR v1 */\n\t\t\tif ( typeof legacy === 'function' && ( typeof cb === 'boolean' || ( typeof cb === 'string' && cb === 'true' ) ) ) {\n\n\t\t\t\t// Third parameter is multi\n\t\t\t\topts.multi = cb\n\t\t\t\tcb = legacy\n\n\t\t\t}\n\t\t\t/* END BACKWARDS-COMPATABILITY */\n\n\t\t} else if ( typeof options === 'object' ) {\n\n\t\t\t// Set options\n\t\t\topts = Object.assign( opts, options )\n\n\t\t}\n\n\t\t// Remove invalid callback\n\t\tif ( typeof cb !== 'function' ) cb = null\n\n\t\tconst response = getMovieId( movie, opts.year, opts.language )\n\t\t\t.then( movieId => {\n\n\t\t\t\treturn getTrailer( movieId, opts.multi, opts.id, opts.language )\n\n\t\t\t} )\n\n\t\t// Callback\n\t\tif ( cb ) {\n\n\t\t\treturn response.then( res => cb( null, res ), err => cb( err, null ) )\n\n\t\t}\n\n\t\t// Promise\n\t\treturn response\n\n\t}\n\n\t// Exposed public method\n\treturn movieTrailer\n\n} )\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}